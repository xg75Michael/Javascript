//****浏览器
-性能优化方法：
	减少http请求，合理运用浏览器缓存。
	使用压缩HTML，CSS，JS文件。
	CSS Sprites： 合并图片，减少请求次数。
	CSS选择符优化（解析是从右往左）。
	CDN部署提高获取速度，通常为静态文件，图片，CSS，静态页面等。
	懒加载图片（LazyLoad）。
	CSS放在页面最上部（优先下载加载），JS放在最下面。
	异步加载JS。
	减少cookie传输，以及减少cookie的数据量。
	JS优化：
		减少作用域链查找，在局部环境下声明局部变量并存储全局变量。
		减少对象以及数组的深度查找。
		减少使用“+”来拼接字符。（可用join方法代替）
		少用HTML Collection，with，eval，function。
-浏览器返回状态码：
	1XX - 信息提示
		100: 继续
		101: 切换协议
	2XX - 成功
		200: 请求成功
		201: 已创建
		202: 已接受
		203: 非权威性信息
		204: 无内容
		205: 重复内容
		206: 部分内容
		207: 多状态
	3XX - 重定向
		301: 已永久移动
		302: 对象已移动
		304: 未修改
		307: 临时重定向
	4XX - 客户端错误
		400: 错误的请求
		401: 访问拒绝
		403: 禁止访问
		404: 无，没有找到文件或目录
		405: 访问HTTP的方法不被允许
		406: 客户端浏览器不接受所有页面的MIME类型
		407: 代理身份验证
		412: 前提条件失败
		413: 请求实体太大
		414: 请求URI太长
		415: 不支持媒体类型
		416: 无法满足请求范围
		417: 执行失败
		423: 锁定的错误
	5XX - 服务器错误
		500: 内部服务器错误
		501: 页眉值指定了未实现的配置
		502: Web服务器用作网关或代理服务器时收到了无效响应
		503: 服务不可用
		504: 网关超时
		505: HTTP版本不受支持
-IIS HTTP状态码：
	200: 成功
	206: 部分内容
	207: 多状态
	301: 已永久移动
	302: 已找到
	304: 未修改
-HTTP2.0和HTTP1.1的区别：
	HTTP2.0采用二进制格式而非文本格式，二进制协议解析起来更有效，错误更少。
	HTTP2.0完全多路复用，而非有序并阻塞的，只需要一个连接即可实现并行。
	使用报头压缩，降低了开销。减少来回的请求次数。
	让服务器可以将响应主动”推送“到客户端缓存中。避免往返的延迟。
-HTTPS和HTTP的区别：
	https协议需要到ca申请证书，一般需要一定费用。
	http是超文本传输协议，明文传输，https则是ssl加密传输协议。https是http加密版。
	http端口是80，https端口是443，使用完全不同的连接方式。
	http连接是无状态的，https是HTTP+SSL构建的可加密传输、身份认证的网络协议。
	http工作流程：
		建立TCP/IP连接，客户端与服务器通过Socket三次握手进行连接。
		客户端向服务器发送HTTP请求。
		客户端发送请求头信息，请求内容，一行空格表示请求完毕。
		服务器对客户端请求作出回应。
		服务器向客户端发送应答头信息。
		请求头信息后加一行空格表示发送完毕，然后以Content-type要求的数据格式发送数据给客户端。
		服务器关闭TCP连接。
		特点：支持客户/服务器模式（C/S模式）、简单快速、灵活、无连接、无状态。
	HTTPS工作流程：
		客户使用https的URL访问Web服务器，眼球建立SSL连接。
		Web服务器受到请求后，会将网站的证书信息（公钥）传送给客户端。
		客户端浏览器与Web服务器协商SSL连接的安全等级，信息加密等级。
		客户端的浏览器根据安全等级建立绘画密钥，用网站的公钥将会话密钥加密并传送给网站。
		Web服务器利用自己的密钥解密出会话密钥。
		Web服务器利用会话密钥加密与客户端之间的通信。
-浏览器缓存机制：
	用户发送请求后根据是否有缓存来判断是否向服务器请求资源（A）。
	如果有缓存再根据资源是否过期来判断是否从缓存中读取数据（B）。
	如果已经过期则向浏览器发送请求。
	之后再判断是否使用缓存。
	不使用缓存则向服务器请求资源（A）。
	使用缓存则从缓存中读取数据（B）。
	强缓存： 不与服务器发生交互行为，直接从客户端缓存中读取。
	协商缓存： 由服务器判断是否从缓存中获取，根据返回头中Cache-control、expires、last-modified、date、etag等字段来判断。	
	



//****CSS







//****JavaScript
-JavaScript的优缺点：
	JavaScript是基于对象的事件驱动并具有相对安全的客户端脚本语言。
	动态，弱类型，单线程，内置支持类。
	相对安全： JS不允许访问本地磁盘且不会将数据存入服务器。
	事件驱动脚本语言： 响应鼠标单击，下滑页面等。
	响应需求事件： 简化了表单输入验证。
-ES6新增内容：
	const和let变量。
	模版字面量。使用``反单引号，可以使用${expression}来表示占位符。
	箭头函数。
	JavaScript类。
	函数参数的默认值。
	数组和对象的解构，arr=[1,2,3,]; [a,b,c]=arr; console.log(a,b,c); //1,2,3
	展开运算符，用（…）表示。 var names=[“A”,”B”,”C”];console.log(…names); //ABC
	(…vals)可以用于参数对象，表示剩下的所有参数。
-ES6箭头函数=>的特点：
	简洁，但是没有自己的this（不会改变原本的绑定），arguments，super，new.target。
	无法使用new来用作构造器。没有prototype属性。
	返回对象字面量的时候需要加小括号。
	箭头函数闭包示例：var add = (i=0)=>()=>(++i);var test=add(); test(); //1
-ES6 Promises是什么：
	本身是一个对象，有pending，resolved，rejected三个状态，无论失败与否都会有“答复”。
	异步编程的一种解决方案，最早由社区提出实现，后ES6写进了语言标准。
	JavaScript event loop事件循环完成之前是不会callback的，常用.then()方法写链式调用函数。
-ES6 新增Map与原生对象的区别：
	Object和Map存储的都是键值对的组合，Object无序，Map有序根据插入顺序。
	Object键只能是字符串，而Map可以是任意类型。
	Map的键是跟内存地址绑定的，可以拥有相同值的引用类型作为键（扩展别人库的时候很方便），如果键是简单类型===视为一个键（NaN为同一键）。
	Map()简单的实例： 	var mm = new Map([[‘name’,’Michael’],[‘time’,’29’]]);
			mm.size; //2
			mm.has(‘name’); //true
			mm.get(‘name’); //“Michael”
			mm.set(‘name’,’Gao’); //“Gao”	
	如果读取一个不存在的键会返回undefined： new Map().get(‘unknown’); //undefined	
	同一键连续赋值将覆盖前者： let map = new Map();map.set(1,'aa').set(1,'bb');map.get(1); //“bb”
	Map()继承的属性：
		Map.prototype.constructor:	返回一个函数，它创建了实例的原型。
		Map.prototype.size:		返回键值对的数量。
	Map()继承的方法：
		Map.prototype.clear():	
-基本类型的值是无法被改变的，只能被重新赋值。
	var str = “abc”;
	str[0] = 1;
	str的值仍然是“abc”。
-var let const的区别：
	var let const都有全局作用域和函数作用域。
	相对var, let有块级作用于，{let a=1;}console.log(a); //Error
	let和const在同一作用域不能声明2次。
	const必须初始化，且赋值后不能修改(readonly)。
-null和undefined的区别：
	null通常是给一些暂时不用的变量赋值，undefined声明但未赋值。
	null == undefined; null !== undefined; //null是Object类型
	function test(){var nothing;} console.log(test()); //输出：undefined
-defer和async的区别：
	正常的script标签会在页面元素解析中遇到时下载并执行，页面可能会造成长时间的等待。
	有async和defer都是在HTML解析中可以下载的。
	async下载后停止解析HTML并直接执行，defer只会在HTML全部解析之后执行（理应按照加载顺序执行）。

-数组的方法：
	操作方法：
		
	迭代方法：
		.every()
		.filter()
		.forEach()
		.map()
		.some()
-面试笔试常见重点题：
	function closeFn() {var count = 0;
		return function closeFn2() {
			alert(count++);
		}
	}
	var test1 = closeFn(); var test2 = closeFn();
	test1();test1();test2(); //010



























