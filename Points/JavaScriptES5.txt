# JavaScript 教程
## https://wangdoc.com/javascript/index.html
## 入门篇
- Label:
	```
	labelName: 
	statement(multiple loop);
	```
	Can use with break labelName; to make all the statement break.

## 数据类型
- typeof:
	return `number`, `string`, `boolean`, `function`, `undefined`, `object`
	`if(someVariable){//...}` will give error is someVariable not defined
	Recommendation: `if(typeof someVariable === “undefined”){//...}`
- Boolean: 
	undefined, null, false, 0, NaN, “”, ‘’ == false;
	[] == true;
	{} == true;
- Object：
	`Object.keys(obj)`: return all keys in obj
	delete: 
		`delete obj.notExist; // return true`
		Only when configurable: false, delete obj... // return false
	with:	```
		var obj = {p1:1,p2:2};
		with (obj) {
			p1=4;
			p2=5;
		}
		// equal to
		obj.p1=4; obj.p2=5;
		```
		Not recommend to use `with`, `with` may create global variable when obj not has it.
- Function:
	`var f = function f() {}; // This way is easy for call f inside of f();`
	`new Function(‘x’,’y’,’return x+y;’); // Last one is function body;`
	Could use `arguments` and `switch` to write Function Overload;
	函数的作用域是定义时的作用域，不是执行时的作用域。
- Array:
	Array can have properties and not effect to `.length`;
		`var a=[]; a[“p”]=“abc”; console.log(a.length) // 0`

## 运算符
- 算术运算符： 
	only `++` and `—` change origin value;
	`**` begin from right, like `2 ** 3 ** 2 //512` equal to //2 ** (3 ** 2);
	` ‘2’ > ’11’ // true` cause string is compare by Unicode one by one from left;
- Boolean: 
	`!!x` equals to `Boolean(x)`;
	condition1 && condition2:
		if condition1 = true, then return condition2
		if condition1 = false, then return condition1
	&& return first false value until the last one;
	|| return first true value until the last one.
- 二进制位运算符： 
	共7个，`|`, `&`, `~`, `^`, `<<`, `>>`, `>>>`
	太难了...不直观导致许多场合不能使用，不实用。
- 其他运算符：
	`void()` always return undefined, could use it in `<a>` to prevent default:
		`<a href=“javascript: void(document.form.submit())”>Submit</a>`
	`’a’,’b’ //“b”` return second value:
		`var value = (console.log(‘hi!’), true); //true` 作用是做一些辅助操作;
	赋值`=`和三元条件运算符`? :`和指数运算符`**`是从右到左到顺序：
		`q = a ? b : c ? d : e ? f : g;`
		equal `q = a ? b : (c ? d : (e ? f : g));`


## 语法专题
- 数据类型的转换：
	3个强制转换： `Number()`, `String()`, `Boolean()`;
	`Number(‘321abc’) // NaN` 相对`parseInt(‘321abc’) // 321`,前者只要有一个字符无法转换则返回`NaN`;
	`Boolean()`中只有以下5个为`false`:
		`undefined`, `null`, `0(-0,+0)`, `NaN`, `’’`
	only `+` could transfer to strings;
- 错误处理机制：
	```
	var err = new Error(‘Wrong’); // err.message = ‘Wrong’;
	if(err.name) {
		throw err.message; // ‘Wrong’
	}```
	原生几种错误对象：
		```
		var err1 = new Error('wrong');
		var err2 = new RangeError('range wrong');
		var err3 = new TypeError('type wrong');
		var err4 = new SyntaxError('syntax wrong');
		var err5 = new ReferenceError('reference wrong');
		var err6 = new URIError('URI wrong');
		var err7 = new EvalError('no longer use this one');
		err1.message; // “wrong”
		err2.message; // “range wrong”
		err3.message; // “type wrong”
		err4.message; // “syntax wrong”
		err5.message; // “reference wrong”
		err6.message; // “URI wrong”
		err7.message; // “no longer use this one”
		```
	自定义错误：
		```
		function MyError(message) {
			this.message = message || ‘default message’;
			this.name = ‘MyError’;
		}
		MyError.prototype = new Error();
		MyError.prototype.constructor = MyError;
		```
	`throw` 的作用是手动中断程序， 它可以抛出任何值;
	`try...catch` 的作用是捕捉错误并对错误处理，程序不会中断;
	`finally` 的作用是无论是否有错误最后都会执行的代码;
		```
		function f() {
  			try {
    				console.log(0);
    				throw 'bug'; // 进入catch
  			} catch(e) {
    				console.log(1);
    				return true; // 这句原本会延迟到 finally 代码块结束再执行
    				console.log(2); // 不会运行
  			} finally {
    				console.log(3);
    				return false; // 这句会覆盖掉前面那句 return
    				console.log(4); // 不会运行
  			}
	  		console.log(5); // 不会运行
		}
			var result = f(); // 0 1 3
			result; // false
		```
- 编程风格：
	圆括号(parentheses)在函数调用和函数定义时，函数名和左括号之间没有空格，其他都有。
	分号：
		`for`和`while`循环不需要分号，但是`do...while`需要;
		`if`, `switch`, `try`不需要分号;
		函数声明不需要分号，但是函数表达式需要;
	`switch…case` 建议用对象结构代替;
- console 对象与控制台：
	`console.log()`和`console.info()用法效果基本相同；
		console.log 支持以下占位符：
			`%s`字符串
			`%d`整数
			`%i`整数
			`%f`浮点数
			`%o`对象的链接
			`%c`CSS格式字符串:
				`console.log(‘%cThis style!’, ‘color: green;’)` //绿色的 This style!
	`console.warn()`会在前面挤上黄色三角以示警告，同时高亮；
	`console.error()`会在前面加上红色的叉表示错误，同时高亮；
	`console.table()`会输出表格，Array或者Object都可以；
	`console.count()`接收一个参数，根据参数来计数；
	`console.dir()`和`console.dirxml()`以更易于阅读的方式显示所有信息；
	`console.assert()`两个参数，第一个是表达式，只有在第一个参数为`false`的时候打印第二个参数字符串；
	`console.time()`和`console.timeEnd()`接收同一个参数来计算中间所花的时间；
	`console.group()`, `console.groupEnd()`, `console.groupCollapsed()`在大量输出时分组折叠/展开；
	`console.trace()`显示调用路径；
	`console.clear()`清空控制台,可以被`Preserve log`选项否认；
	控制台API:
		`$_`上一个表达式
		`getEventListeners(object)`返回一个对象对应object事件；
		`keys(object)`和`values(object)`返回键名和键值；
		`monitorEvents(object, [events])`和`unmonitorEvents(object, [events])`监听事件，返回相关信息；
			`monitorEvents(window, “resize”);`
	`debugger`在没有除错工具时自动被跳过，有除错工具的时候运行到的时候会暂停，自动打开源码等待下一步操作；
		Chrome浏览器中运行到`debugger`时暂停运行，自动打开源码界面；


## 标准库
- Object:
	Object静态方法：
		`Object.keys()`和 `Object.getOwnPropertyNames()`都是枚举自身的属性名，只有后者返回不可枚举属性的属性名。
			``` 	
			var a = [1,2,3];
			Object.keys(a) // [“0”, “1”, “2”];
			Object.getOwnPropertyNames(a) // [“0”, “1”, “2”, “length”] 
			```
		`Object.getOwnPropertyDescriptor()` 获取某个属性的描述对象；




















